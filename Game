
from random import randrange

class Jugador(object):


    def __init__(self, symbol, isComputer):

        self.symbol = symbol
        self.isComputer = isComputer

    def play(self, gameBoard):

        # Find the place to mark the symbol at.
        if self.isComputer:
            print('Computer Turn...')
            global count
            depth, alpha, beta, isMax = 9 - count, -10, 10, True
            value, place = self.alphaBeta(gameBoard, depth, alpha, beta, isMax)
            print('Computer plays at:', place + 1)
        else:
            print('Your Turn...')
            place = int(input('Enter a number from 1 to 9: ')) - 1
            while self.isInvalid(gameBoard, place):
                place = int(input('Enter again: ')) - 1
        # Mark the symbol at the calculated or user obtained place.
        gameBoard[place] = self.symbol

    def alphaBeta(self, gameBoard, depth, alpha, beta, isMaxPlayer):
        value = verificaganador(gameBoard, jugador)
        if value != 0:
            return value, -1
        if depth == 0:
            return value, -1
        if isMaxPlayer:
            value = -10
            listOfNumbers = list(range(9))
            while listOfNumbers:
                random = listOfNumbers.pop(randrange(len(listOfNumbers)))
                if gameBoard[random] == 'b':
                    gameBoard[random] = jugador[1].symbol
                    temp_value = self.alphaBeta(gameBoard, depth - 1, alpha, beta, False)[0]
                    if temp_value > value:
                        value = temp_value
                        place = random
                    alpha = max(alpha, value)
                    gameBoard[random] = 'b'
                    if alpha >= beta:
                        break
        else:
            value = 10
            listOfNumbers = list(range(9))
            while listOfNumbers:
                random = listOfNumbers.pop(randrange(len(listOfNumbers)))
                if gameBoard[random] == 'b':
                    gameBoard[random] = jugador[0].symbol
                    temp_value = self.alphaBeta(gameBoard, depth - 1, alpha, beta, True)[0]
                    if temp_value < value:
                        value = temp_value
                        place = random
                    beta = min(beta, value)
                    gameBoard[random] = 'b'
                    if beta <= alpha:
                        break
        return value, place

    def isInvalid(self, gameBoard, place):

        if place not in list(range(9)):
            print('ERROR: Invalid input. Number not from 1 to 9.')
            return True
        if gameBoard[place] != 'b':
            print('ERROR: Invalid input. Place already marked.')
            return True

        return False

    def isSymbolX(self):
        return self.symbol == 'X'


# ===================================================================
# Functions
# ===================================================================

def welcomeMessage():

    msg = 'Bienvenido a Tic Tac Toe.' \
          + ' **Ingresa un numero del 1 al 9 ' \
          + ' en el espacio vacio (MARCADO COMO UNA B).**\nSUERTE! :)'
    print(msg)


def initialize():

    global tabla, jugador, turno, count
    tabla, count = list('b' * 9), 0

    if input('Deseas jugar primero? (si/no)\n')[0].lower() == 'y':
        jugador, turno = [Jugador('X', False), Jugador('O', True)], 0
    else:
        jugador, turno = [Jugador('O', False), Jugador('X', True)], 1


def drawBoard(gameBoard):
    for i in range(9):
        print(gameBoard[i], '\n' * ((i % 3) - 1), end == '')


def mensajeganador(whoWon):
    if whoWon == 1:
        print('Sorry. PERDISTE.')
    elif whoWon == -1:
        print('FELICIDADES! GANASTE!')
    else:
        print('EMPATE.')


def verificaganador(gameBoard, player):

    symbolToNumber, gameState = {}, [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    symbolToNumber['X'] = 2 * player[1].isSymbolX() - 1
    symbolToNumber['O'] = 2 * player[0].isSymbolX() - 1
    symbolToNumber['b'] = 0

    for i in range(3):
        for j in range(3):
            gameState[i][j] = symbolToNumber[gameBoard[i * 3 + j]]

    for i in range(3):
        rowcount, colcount = 0, 0
        for j in range(3):
            rowcount += gameState[i][j]
            colcount += gameState[j][i]
        if (rowcount == -3 or colcount == -3):
            return -1
        if (rowcount == 3 or colcount == 3):
            return 1
    if gameState[1][1] == -1:
        if (gameState[0][0] == -1 and gameState[2][2] == -1) or (gameState[0][2] == -1 and gameState[2][0] == -1):
            return -1
    if gameState[1][1] == 1:
        if (gameState[0][0] == 1 and gameState[2][2] == 1) or (gameState[0][2] == 1 and gameState[2][0] == 1):
            return 1

    return 0



if __name__ == '__main__':
    welcomeMessage()
    option = 'y'
    while option == 'y':
        initialize()
        Quiengano = False
        while not Quiengano:
            drawBoard(tabla)
            jugador[turno].play(tabla)
            Quiengano = verificaganador(tabla, jugador)
            turno = 1 - turno
            count += 1
            if count == 9:
                break
        drawBoard(tabla)
        mensajeganador(Quiengano)
        option = input('QUIERES JUGAR OTRA VEZ? (si/no)\n')[0].lower()
